
// huffware script: turbo lifter, by fred huffhines

// constants you may want to adjust...

float minimum_height = 0.5;
    // the lowest that the lifter will move -- relative to ground height.

float maximum_height = 1007.5;
    // the highest that the platform will move in absolute height (not relative to ground!).

// the rationale for having the minimum be based on ground height and the maximum be based
// on absolute heights is that it is often the case that one wants to have the elevator meet
// people at the ground, and then take them high up in the clouds.  given that main usage
// pattern, we've found it way more convenient to reckon the base against ground but leave
// the top absolute so we can match sky houses et al.
    
float movement_per_cycle = 100.0;
    // how much change in height occurs per timer hit.

integer SLEEP_DURATION = 28;
    // how long the elevator pauses at the stations.
  
integer PAUSE_DURATION = 14;
    // the delay added when a user clicks on the elevator.

integer COUNTDOWN_INTERVAL = 8;
   // the frequency of the countdown message about departure.

integer WHISPER_COUNTDOWN = FALSE;
    // if TRUE, the elevator will count down its departure schedule.

//////////////

// requires: jaunting library v14.0 or higher.
//////////////
integer JAUNT_HUFFWARE_ID = 10008;
    // the unique id within the huffware system for the jaunt script to
    // accept commands on.  this is used in llMessageLinked as the num parameter.
string HUFFWARE_PARM_SEPARATOR = "{~~~}";
    // this pattern is an uncommon thing to see in text, so we use it to separate
    // our commands in link messages.
string HUFFWARE_ITEM_SEPARATOR = "{|||}";
    // used to separate lists of items from each other when stored inside a parameter.
    // this allows lists to be passed as single string parameters if needed.
integer REPLY_DISTANCE = 100008;  // offset added to service's huffware id in reply IDs.
//////////////
string JAUNT_COMMAND = "#jaunt#";
    // command used to tell jaunt script to move object.
//////////////

//////////////

// global variables and their default values...

integer going_up = FALSE;
    // remembers which direction the platform is moving.

integer next_movement;
    // when the lift should next move.  delayed for stations and
    // when user chooses to delay take-off.

//////////////

float height_above_ground()
{
    vector position = llGetPos();
    vector size = llGetAgentSize(llGetOwner()); 
    return position.z - llGround(<0.0,0.0,0.0>) - size.z;
}

jaunt_to_target(vector target)
{
    llMessageLinked(LINK_THIS, JAUNT_HUFFWARE_ID, JAUNT_COMMAND, (string)target);
}

//////////////
// huffware script: auto-retire, by fred huffhines, version 2.5.
// distributed under BSD-like license.
//   !!  keep in mind that this code must be *copied* into another
//   !!  script that you wish to add auto-retirement capability to.
// when a script has auto_retire in it, it can be dropped into an
// object and the most recent version of the script will destroy
// all older versions.
//
// the version numbers are embedded into the script names themselves.
// the notation for versions uses a letter 'v', followed by two numbers
// in the form "major.minor".
// major and minor versions are implicitly considered as a floating point
// number that increases with each newer version of the script.  thus,
// "hazmap v0.1" might be the first script in the "hazmap" script continuum,
// and "hazmap v3.2" is a more recent version.
//
// example usage of the auto-retirement script:
//     default {
//         state_entry() {
//            auto_retire();  // make sure newest addition is only version of script.
//        }
//     }
// this script is partly based on the self-upgrading scripts from markov brodsky
// and jippen faddoul.
//////////////
auto_retire() {
    string self = llGetScriptName();  // the name of this script.
    list split = compute_basename_and_version(self);
    if (llGetListLength(split) != 2) return;  // nothing to do for this script.
    string basename = llList2String(split, 0);  // script name with no version attached.
    string version_string = llList2String(split, 1);  // the version found.
    integer posn;
    // find any scripts that match the basename.  they are variants of this script.
    for (posn = llGetInventoryNumber(INVENTORY_SCRIPT) - 1; posn >= 0; posn--) {
//log_it("invpo=" + (string)posn);
        string curr_script = llGetInventoryName(INVENTORY_SCRIPT, posn);
        if ( (curr_script != self) && (llSubStringIndex(curr_script, basename) == 0) ) {
            // found a basic match at least.
            list inv_split = compute_basename_and_version(curr_script);
            if (llGetListLength(inv_split) == 2) {
                // see if this script is more ancient.
                string inv_version_string = llList2String(inv_split, 1);  // the version found.
                // must make sure that the retiring script is completely the identical basename;
                // just matching in the front doesn't make it a relative.
                if ( (llList2String(inv_split, 0) == basename)
                    && ((float)inv_version_string < (float)version_string) ) {
                    // remove script with same name from inventory that has inferior version.
                    llRemoveInventory(curr_script);
                }
            }
        }
    }
}
//
// separates the base script name and version number.  used by auto_retire.
list compute_basename_and_version(string to_chop_up)
{
    // minimum script name is 2 characters plus a version.
    integer space_v_posn;
    // find the last useful space and 'v' combo.
    for (space_v_posn = llStringLength(to_chop_up) - 3;
        (space_v_posn >= 2) && (llGetSubString(to_chop_up, space_v_posn, space_v_posn + 1) != " v");
        space_v_posn--) {
        // look for space and v but do nothing else.
//log_it("pos=" + (string)space_v_posn);
    }
    if (space_v_posn < 2) return [];  // no space found.
//log_it("space v@" + (string)space_v_posn);
    // now we zoom through the stuff after our beloved v character and find any evil
    // space characters, which are most likely from SL having found a duplicate item
    // name and not so helpfully renamed it for us.
    integer indy;
    for (indy = llStringLength(to_chop_up) - 1; indy > space_v_posn; indy--) {
//log_it("indy=" + (string)space_v_posn);
        if (llGetSubString(to_chop_up, indy, indy) == " ") {
            // found one; zap it.  since we're going backwards we don't need to
            // adjust the loop at all.
            to_chop_up = llDeleteSubString(to_chop_up, indy, indy);
//log_it("saw case of previously redundant item, aieee.  flattened: " + to_chop_up);
        }
    }
    string full_suffix = llGetSubString(to_chop_up, space_v_posn, -1);
    // ditch the space character for our numerical check.
    string chop_suffix = llGetSubString(full_suffix, 1, llStringLength(full_suffix) - 1);
    // strip out a 'v' if there is one.
    if (llGetSubString(chop_suffix, 0, 0) == "v")
        chop_suffix = llGetSubString(chop_suffix, 1, llStringLength(chop_suffix) - 1);
    // if valid floating point number and greater than zero, that works for our version.
    string basename = to_chop_up;  // script name with no version attached.
    if ((float)chop_suffix > 0.0) {
        // this is a big success right here.
        basename = llGetSubString(to_chop_up, 0, -llStringLength(full_suffix) - 1);
        return [ basename, chop_suffix ];
    }
    // seems like we found nothing useful.
    return [];
}
//
//////////////


default
{
    state_entry() { if (llSubStringIndex(llGetObjectName(),  "huffotronic") < 0) state real_default; }
    on_rez(integer parm) { state rerun; }
}
state rerun { state_entry() { state default; } }

state real_default
{
    state_entry()
    {
        auto_retire();
        // initialize the next movement so elevator doesn't just zoom off.
        next_movement = llGetUnixTime() + (integer)SLEEP_DURATION;
        // we move at one second intervals due to our use of unix time,
        // which has a resolution of seconds.
        llSetTimerEvent(4.0);
    }
    
//need commands, like start, or call to come down.
// need elevator system that would call it.
//  if elevator style deal, needs to not delay so silly like.
//    when jaunting, go go go.
    
    timer()
    {
        integer time_now = llGetUnixTime();
        // make sure it's time to do something.
        if (time_now < next_movement) {
            integer time_left = next_movement - time_now;
            if ( (time_left <= 2) || !(time_left % COUNTDOWN_INTERVAL) ) {
                if (WHISPER_COUNTDOWN) {
//hmmm: abstract pluralizer out as separate function.
                    string plural = "s";
                    if (time_left == 1) plural = "";
                    llWhisper(0, "Time remaining before departure: "
                        + (string)time_left + " second" + plural + ".");
                }
            }
            return;  // not time to move yet.
        }
        // set the next movement time to be without any delay, until we know better.
        next_movement = llGetUnixTime();
        // compute where we should jump to next.        
        vector next_location = llGetPos();
        // add in the appropriate amount to our height.
        if (going_up) next_location += <0.0, 0.0, movement_per_cycle>;
        else next_location -= <0.0, 0.0, movement_per_cycle>;
        // check whether we've hit one of our extremes.
        if (next_location.z >= maximum_height) {
            going_up = FALSE;  // start going down.
            next_movement = llGetUnixTime() + (integer)SLEEP_DURATION;
            next_location.z = maximum_height;
        } else if (next_location.z <= minimum_height + llGround(<0.0,0.0,0.0>)) {
            going_up = TRUE;  // begin going up.
            next_movement = llGetUnixTime() + (integer)SLEEP_DURATION;
            next_location.z = minimum_height + llGround(<0.0,0.0,0.0>);
        }
        // now actually go to where we decided.
        jaunt_to_target(next_location);
    }

    touch_start(integer total_number)
    {
        next_movement += (integer)PAUSE_DURATION;
        llWhisper(0, "Your click delays departure by " + (string)PAUSE_DURATION + " seconds.");
    }
}

