#\
[version]
# specifies the version of the code that is being constructed here.
major=2
minor=140
revision=98
build=420

# specifies the remainder of the version record info.
company=Feisty Meow Concerns, Ltd.
copyright=(C) 1987-$now Chris Koeritz & Others, under GNU GPL License
legal_info=This software is free to copy under the terms of the GNU GPL (or the GNU Library License if you prefer).  See http://www.gnu.org/licenses/gpl.html for more info.  We suggest peaceful purposes that help all sentient beings.
product_name=feisty_meow
web_site=http://feistymeow.org

# some settings that affect how the code is generated.

# if DEBUG is not empty, then code is built with more debugging information.
DEBUG=t
# if NOISY is non-empty, there will be more information emitted during builds.
#NOISY=t

# if this is turned on, then all warnings are turned on and they are
# considered errors.
#STRICT_WARNINGS=t

# comment this out if you do not want to activate RUN_TARGETS for tests.
#RUN_ALL_TESTS=t

# if this is enabled, then the source dependencies are only generated if
# they're missing or if this file has changed.  non-lax dependencies get
# rebuilt whenever a header involved changes, or dependent libraries have
# changed.
LAX_DEPENDENCIES=t

# when this is enabled, a previously built precompiled header file will be
# used for speeding up usage of windows system and mfc headers.
#PRECOMPILED_HEADERS=t

# if this is non-empty, the generated binaries are optimized primarily for
# speed.  we turn this flag off for debugging mode, since optimization can
# interfere with tracing the running program.
OPTIMIZE=t
ifneq "$(DEBUG)" ""
  OPTIMIZE=
endif

# at home or for personal builds, it seems silly to create the whole build
# package.
#NO_BUILD_PACK=t

# macros that control which features are enabled in the software.

# if this is defined, then errors (such as out of range array accesses) will
# be caught and a message will be sent to the runtime issues log file.
DEFINITIONS += CATCH_ERRORS=t

# when this is defined, any errors that are caught cause the program to exit.
DEFINITIONS += ERRORS_ARE_FATAL=t

# this turns on intensive checks on the integrity of data structures and will
# cause the software to run more slowly but more carefully.  this should only
# be used when seeking logic errors in the low-level code.
ifeq "$(BOOT_STRAPPING)" ""
#  DEFINITIONS += EXTREME_CHECKING=t
endif

# this flag selects whether to build with unicode enabled.  this mainly affects
# win32 OSes, and right now we know it affects them badly if this is enabled.
# unix may build slightly differently too, such as for WX widgets.
ifneq "$(OP_SYSTEM)" "WIN32"
#  DEFINITIONS += UNICODE=t
endif

# if this flag is turned on, then memory allocations will be trapped for
# analysis.  memory leaks will be reported at program end, and the memory
# state can also be queried during runtime.
ifeq "$(BOOT_STRAPPING)" ""
#  DEFINITIONS += ENABLE_MEMORY_HOOK
endif

# if the callstack flag below is made available, hoople will trace the stack
# invocations that occur during runtime.  this provides really low-level
# methods with a way to know how they were invoked.  to get this information.
# the invoker must be fitted with FUNCDEF macros.
ifeq "$(BOOT_STRAPPING)" ""
#  DEFINITIONS += ENABLE_CALLSTACK_TRACKING
endif

